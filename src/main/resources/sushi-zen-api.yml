openapi: 3.0.3
info:
    description: "Provides functionalities for users, menu items, cart, and order management."
    title: SushiZen Web Ordering System APIs
    version: 1.0.0
servers:
    - description: Production server
      url: https://api.sushizen.com/v1

tags:
    - description: Operations related to user management
      name: Users
    - description: Managing restaurant menu items
      name: Menu
    - description: User's cart management before ordering
      name: Cart
    - description: Placing and managing orders
      name: Orders
    - description: Admin functionalities for managing users, menu, and reports
      name: Admin
    - description: Kitchen staff operations for processing orders
      name: Kitchen
paths:
    /users:
        get:
            operationId: getUsers
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/UserDTO"
                                type: array
                    description: Successful operation
            summary: Get all users
            tags:
                - Users
            x-accepts:
                - application/json
    /users/register:
        post:
            operationId: registerUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserDTO"
                required: true
            responses:
                "201":
                    description: User created successfully
            summary: Register a new user
            tags:
                - Users
    /users/login:
        post:
            operationId: loginUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginDTO"
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserDTO"
                    description: Successful login
            summary: User login authentication
            tags:
                - Users
    /users/{userId}:
        get:
            operationId: getUserProfile
            parameters:
                - explode: false
                  in: path
                  name: userId
                  required: true
                  schema:
                      type: string
                  style: simple
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserDTO"
                    description: User profile data
            summary: Get a user's profile
            tags:
                - Users
            x-accepts:
                - application/json
        put:
            operationId: updateUserProfile
            parameters:
                - explode: false
                  in: path
                  name: userId
                  required: true
                  schema:
                      type: string
                  style: simple
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserDTO"
                required: true
            responses:
                "200":
                    description: Profile updated successfully
            summary: Update a user's profile
            tags:
                - Users
    /menu:
        get:
            operationId: getMenuItems
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: "#/components/schemas/MenuItemDTO"
                                type: array
                    description: List of menu items
            summary: Get all menu items
            tags:
                - Menu
            x-accepts:
                - application/json
        post:
            operationId: createMenuItem
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MenuItemDTO"
                required: true
            responses:
                "201":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MenuItemDTO"
                    description: Menu item created successfully
                "400":
                    description: Invalid input
            summary: Add a new menu item
            tags:
                - Menu
                - Admin
    /menu/{itemId}:
        get:
            operationId: getMenuItem
            parameters:
                - explode: false
                  in: path
                  name: itemId
                  required: true
                  schema:
                      type: string
                  style: simple
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MenuItemDTO"
                    description: Menu item details
            summary: Get details of a specific menu item
            tags:
                - Menu
            x-accepts:
                - application/json
        put:
            operationId: updateMenuItem
            parameters:
                - explode: false
                  in: path
                  name: itemId
                  required: true
                  schema:
                      type: string
                  style: simple
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MenuItemDTO"
                required: true
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/MenuItemDTO"
                    description: Menu item updated successfully
                "404":
                    description: Menu item not found
                "400":
                    description: Invalid input
            summary: Update an existing menu item
            tags:
                - Menu
                - Admin
    /cart:
        get:
            operationId: getUserCart
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CartDTO"
                    description: Current cart items
            summary: Retrieve user's cart
            tags:
                - Cart
            x-accepts:
                - application/json
        post:
            operationId: addItemToCart
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CartItemDTO"
                required: true
            responses:
                "201":
                    description: Item added to cart
            summary: Add an item to the cart
            tags:
                - Cart
    /cart/{itemId}:
        delete:
            operationId: removeItemFromCart
            parameters:
                - explode: false
                  in: path
                  name: itemId
                  required: true
                  schema:
                      type: string
                  style: simple
            responses:
                "200":
                    description: Item removed successfully
            summary: Remove an item from the cart
            tags:
                - Cart
            x-accepts:
                - application/json
    /orders:
        post:
            operationId: placeOrder
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/OrderDTO"
                required: true
            responses:
                "201":
                    description: Order placed successfully
            summary: Place an order from the cart
            tags:
                - Orders
        get:
            operationId: getAllOrders
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/OrderDTO"
                    description: List of all orders
            summary: Get all orders
            tags:
                - Orders
            x-accepts:
                - application/json
    /orders/{orderId}:
        get:
            operationId: getOrder
            parameters:
                - explode: false
                  in: path
                  name: orderId
                  required: true
                  schema:
                      type: string
                  style: simple
            responses:
                "200":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/OrderDTO"
                    description: Order details
            summary: Get order details
            tags:
                - Orders
            x-accepts:
                - application/json
    /kitchen/orders/{orderId}/status:
        put:
            operationId: updateOrderStatus
            summary: Kitchen updates order status
            tags:
                - Kitchen
            parameters:
                - in: path
                  name: orderId
                  required: true
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/OrderStatusDTO"
            responses:
                "200":
                    description: Order status updated
components:
    schemas:
        UserDTO:
            example:
                phoneNumber: phoneNumber
                role: Customer
                name: name
                userID: userID
                email: email
                password: password
            properties:
                userID:
                    type: string
                name:
                    type: string
                email:
                    type: string
                phoneNumber:
                    type: string
                password:
                    type: string
                role:
                    enum:
                        - Customer
                        - Admin
                        - Kitchen_staff
                    type: string
            required:
                - email
                - name
                - phoneNumber
                - role
                - userID
                - password
            type: object
        LoginDTO:
            example:
                password: password
                email: email
            properties:
                email:
                    type: string
                password:
                    type: string
            required:
                - email
                - password
            type: object
        MenuItemDTO:
            example:
                itemId: itemId
                itemName: itemName
                itemPicture: https://openapi-generator.tech
                available: true
                itemPrice: 45.5
                itemDescription: itemDescription
            properties:
                itemId:
                    type: string
                itemName:
                    type: string
                itemDescription:
                    type: string
                itemPrice:
                    example: 45.5
                    format: float
                    type: number
                itemPicture:
                    format: uri
                    type: string
                available:
                    type: boolean
            required:
                - available
                - itemDescription
                - itemId
                - itemName
                - itemPicture
                - itemPrice
            type: object
        CartDTO:
            example:
                totalPrice: 45.5
                cartId: cartId
                userId: userId
                items:
                    - itemId: itemId
                      quantity: 0
                      totalPrice: 6.02
                    - itemId: itemId
                      quantity: 0
                      totalPrice: 6.02
            properties:
                cartId:
                    type: string
                userId:
                    type: string
                items:
                    items:
                        $ref: "#/components/schemas/CartItemDTO"
                    type: array
                totalPrice:
                    example: 45.5
                    format: float
                    type: number
            required:
                - cartId
                - items
                - totalPrice
                - userId
            type: object
        CartItemDTO:
            example:
                itemId: itemId
                quantity: 0
                totalPrice: 6.02
            properties:
                itemId:
                    type: string
                quantity:
                    type: integer
                totalPrice:
                    type: number
            required:
                - itemId
                - quantity
                - totalPrice
            type: object
        OrderDTO:
            example:
                orderId: orderId
                totalPrice: 0.80
                userId: userId
                items:
                    - itemId: itemId
                      quantity: 0
                      totalPrice: 6.02
                    - itemId: itemId
                      quantity: 0
                      totalPrice: 6.02
                paymentStatus: paid
                status: pending
            properties:
                orderId:
                    type: string
                userId:
                    type: string
                items:
                    items:
                        $ref: "#/components/schemas/CartItemDTO"
                    type: array
                status:
                    enum:
                        - pending
                        - preparing
                        - ready
                        - delivered
                    type: string
                totalPrice:
                    type: number
                paymentStatus:
                    enum:
                        - paid
                        - unpaid
                        - refunded
                    type: string
            required:
                - items
                - orderId
                - paymentStatus
                - status
                - totalPrice
                - userId
            type: object
        OrderStatusDTO:
            type: object
            properties:
                status:
                    type: string
                    enum:
                        - pending
                        - preparing
                        - ready
                        - delivered
            required:
                - status
