/*
 * SushiZen Web Ordering System APIs
 * Provides functionalities for users, menu items, cart, and order management.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MenuItemDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-22T14:06:56.494914600+01:00[Europe/Warsaw]", comments = "Generator version: 7.7.0")
public class MenuItemDTO {
  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_ITEM_NAME = "itemName";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  private String itemName;

  public static final String SERIALIZED_NAME_ITEM_DESCRIPTION = "itemDescription";
  @SerializedName(SERIALIZED_NAME_ITEM_DESCRIPTION)
  private String itemDescription;

  public static final String SERIALIZED_NAME_ITEM_PRICE = "itemPrice";
  @SerializedName(SERIALIZED_NAME_ITEM_PRICE)
  private Float itemPrice;

  public static final String SERIALIZED_NAME_ITEM_PICTURE = "itemPicture";
  @SerializedName(SERIALIZED_NAME_ITEM_PICTURE)
  private URI itemPicture;

  public static final String SERIALIZED_NAME_AVAILABLE = "available";
  @SerializedName(SERIALIZED_NAME_AVAILABLE)
  private Boolean available;

  public MenuItemDTO() {
  }

  public MenuItemDTO itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * Get itemId
   * @return itemId
   */
  @javax.annotation.Nonnull
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public MenuItemDTO itemName(String itemName) {
    this.itemName = itemName;
    return this;
  }

  /**
   * Get itemName
   * @return itemName
   */
  @javax.annotation.Nonnull
  public String getItemName() {
    return itemName;
  }

  public void setItemName(String itemName) {
    this.itemName = itemName;
  }


  public MenuItemDTO itemDescription(String itemDescription) {
    this.itemDescription = itemDescription;
    return this;
  }

  /**
   * Get itemDescription
   * @return itemDescription
   */
  @javax.annotation.Nonnull
  public String getItemDescription() {
    return itemDescription;
  }

  public void setItemDescription(String itemDescription) {
    this.itemDescription = itemDescription;
  }


  public MenuItemDTO itemPrice(Float itemPrice) {
    this.itemPrice = itemPrice;
    return this;
  }

  /**
   * Get itemPrice
   * @return itemPrice
   */
  @javax.annotation.Nonnull
  public Float getItemPrice() {
    return itemPrice;
  }

  public void setItemPrice(Float itemPrice) {
    this.itemPrice = itemPrice;
  }


  public MenuItemDTO itemPicture(URI itemPicture) {
    this.itemPicture = itemPicture;
    return this;
  }

  /**
   * Get itemPicture
   * @return itemPicture
   */
  @javax.annotation.Nonnull
  public URI getItemPicture() {
    return itemPicture;
  }

  public void setItemPicture(URI itemPicture) {
    this.itemPicture = itemPicture;
  }


  public MenuItemDTO available(Boolean available) {
    this.available = available;
    return this;
  }

  /**
   * Get available
   * @return available
   */
  @javax.annotation.Nonnull
  public Boolean getAvailable() {
    return available;
  }

  public void setAvailable(Boolean available) {
    this.available = available;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MenuItemDTO menuItemDTO = (MenuItemDTO) o;
    return Objects.equals(this.itemId, menuItemDTO.itemId) &&
        Objects.equals(this.itemName, menuItemDTO.itemName) &&
        Objects.equals(this.itemDescription, menuItemDTO.itemDescription) &&
        Objects.equals(this.itemPrice, menuItemDTO.itemPrice) &&
        Objects.equals(this.itemPicture, menuItemDTO.itemPicture) &&
        Objects.equals(this.available, menuItemDTO.available);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemId, itemName, itemDescription, itemPrice, itemPicture, available);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MenuItemDTO {\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    itemDescription: ").append(toIndentedString(itemDescription)).append("\n");
    sb.append("    itemPrice: ").append(toIndentedString(itemPrice)).append("\n");
    sb.append("    itemPicture: ").append(toIndentedString(itemPicture)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemId");
    openapiFields.add("itemName");
    openapiFields.add("itemDescription");
    openapiFields.add("itemPrice");
    openapiFields.add("itemPicture");
    openapiFields.add("available");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("itemId");
    openapiRequiredFields.add("itemName");
    openapiRequiredFields.add("itemDescription");
    openapiRequiredFields.add("itemPrice");
    openapiRequiredFields.add("itemPicture");
    openapiRequiredFields.add("available");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MenuItemDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MenuItemDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MenuItemDTO is not found in the empty JSON string", MenuItemDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MenuItemDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MenuItemDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MenuItemDTO.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if (!jsonObj.get("itemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemName").toString()));
      }
      if (!jsonObj.get("itemDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemDescription").toString()));
      }
      if (!jsonObj.get("itemPicture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemPicture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemPicture").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MenuItemDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MenuItemDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MenuItemDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MenuItemDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<MenuItemDTO>() {
           @Override
           public void write(JsonWriter out, MenuItemDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MenuItemDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MenuItemDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MenuItemDTO
   * @throws IOException if the JSON string is invalid with respect to MenuItemDTO
   */
  public static MenuItemDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MenuItemDTO.class);
  }

  /**
   * Convert an instance of MenuItemDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

